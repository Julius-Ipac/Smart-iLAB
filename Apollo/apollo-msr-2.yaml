substitutions: # per device-specific substitutions (copy this only to the esphome web ui)
  name: apollo-msr-2
  version: "24.5.9.1"
  device_description: ${name} made by Apollo Automation - version ${version}.

packages:
  device_base:
    url: https://github.com/Cahlil-Togonon/Smart-iLAB
    ref: main
    file: packages/device_base.yaml
    refresh: 5min

globals:
  - id: button_press_timestamp
    restore_value: no
    type: uint32_t
    initial_value: '0'
  - id: runTest
    restore_value: yes
    type: bool
    initial_value: "true"
  - id: testCycleCount
    type: int
    restore_value: no
    initial_value: "0"
  - id: dps310Passed
    restore_value: no
    type: bool
    initial_value: "false"
  - id: ltr390lightPassed
    restore_value: no
    type: bool
    initial_value: "false"
  - id: ltr390uvindexPassed
    restore_value: no
    type: bool
    initial_value: "false"
  - id: ld2410Passed
    restore_value: no
    type: bool
    initial_value: "false"

  - id: "rgb_light_state"
    restore_value: no
    type: std::string
  - id: "rgb_light_values"
    restore_value: no
    type: std::map<std::string, int>
  - id: "rgb_light_brightness"
    restore_value: no
    type: int

mqtt:
  id: mqtt_sensor
  broker: !secret broker_ip
  port: !secret broker_port
  username: !secret broker_username
  password: !secret broker_password
  on_json_message: 
    - topic: "${device_manufacturer}_%{device_name}_${device_id}/light"
      then: 
        - if:
            condition: 
              lambda: !lambda |-
                if(x.containsKey("state")){
                if(x["state"] == "On"){
                id(rgb_light_state) = "On";
                return true;
                }
                }
                id(rgb_light_state) = "Off";
                return false;
            then:
              - light.turn_on: 
                  id: rgb_light

                  red: !lambda |-
                    if(x.containsKey("color")){
                    if(x["color"].containsKey("r")){
                    id(rgb_light_values)["r"] = x["color"]["r"];
                    return x["color"]["r"];}}
                    return 0;
                  green: !lambda |-
                    if(x.containsKey("color")){
                    if(x["color"].containsKey("g")){
                    id(rgb_light_values)["g"] = x["color"]["g"];
                    return x["color"]["g"];}}
                    return 0;
                  blue: !lambda |-
                    if(x.containsKey("color")){
                    if(x["color"].containsKey("b")){
                    id(rgb_light_values)["b"] = x["color"]["b"];
                    return x["color"]["b"];}}
                    return 0;
                  brightness: !lambda |-
                    if(x.containsKey("brightness")){
                    id(rgb_light_brightness) = x["brightness"];
                    return x["brightness"];
                    }
                    return 0;
            else:
              - light.turn_off: rgb_light
    - topic: "${device_manufacturer}_%{device_name}_${device_id}/buzzer"
      then: 
        - rtttl.play: !lambda |-
            if(x.containsKey("mtttl_string"))
            return x["mtttl_string"];
            return "";
                
sensor:
  - platform: scd4x
    id: scd40
    co2:
      id: co2
    automatic_self_calibration: false
    update_interval: 60s
    measurement_mode: "periodic"
    i2c_id: bus_a
    ambient_pressure_compensation_source: dps310pressure

  - platform: dps310
    id: dps_310
    pressure:
      id: dps310pressure
    temperature:
      id: dps310temperature
      filters:
        - lambda: return x - id(dps310_temperature_offset).state;
    update_interval: 30s
    i2c_id: bus_a
    
  - platform: ld2410
    moving_distance:
      id: moving_distance
    still_distance:
      id: still_distance
    moving_energy:
      id: radar_moving_energy
    still_energy:
      id: radar_still_energy
    detection_distance:
      id: radar_detection_distance
    g0:
      move_energy:
        name: g0 move energy
        state_class: measurement
      still_energy:
        id: g0_still_energy
        state_class: measurement
    g1:
      move_energy:
        name: g1 move energy
        state_class: measurement
      still_energy:
        id: g1_still_energy
        state_class: measurement
    g2:
      move_energy:
        name: g2 move energy
        state_class: measurement
      still_energy:
        id: g2_still_energy
        state_class: measurement
    g3:
      move_energy:
        name: g3 move energy
        state_class: measurement
      still_energy:
        id: g3_still_energy
        state_class: measurement
    g4:
      move_energy:
        name: g4 move energy
        state_class: measurement
      still_energy:
        id: g4_still_energy
        state_class: measurement
    g5:
      move_energy:
        name: g5 move energy
        state_class: measurement
      still_energy:
        id: g_still_energy
        state_class: measurement
    g6:
      move_energy:
        name: g8_still_energy
        state_class: measurement
      still_energy:
        id: g6_still_energy
        state_class: measurement
    g7:
      move_energy:
        name: g7 move energy
        state_class: measurement
      still_energy:
        id: g7_still_energy
        state_class: measurement
    g8:
      move_energy:
        name: g8 move energy
        state_class: measurement
      still_energy:
        id: g8_still_energy
        state_class: measurement
  
  - platform: ltr390
    id: ltr_390
    light:
      id: ltr390light
    uv_index:
      id: ltr390uvindex


esphome:
  name: "${name}"
  friendly_name: Apollo MSR-2
  comment: Apollo MSR-2
  name_add_mac_suffix: true
  platformio_options:
    board_build.flash_mode: dio

  on_boot:
  - priority: 900.0
    then:
      - lambda: |-
          id(radar_bluetooth).turn_off();
  - priority: -10
    then:
      - if:
          condition:
            - lambda: "return id(runTest);"
          then:
            - lambda: "id(testScript).execute();"
      - lambda: !lambda |-
          id(rgb_light_state) = "Off";
          id(rgb_light_values)["r"] = 0;
          id(rgb_light_values)["g"] = 0;
          id(rgb_light_values)["b"] = 0;
          id(rgb_light_brightness)  = 0;
          
  project:
    name: "ApolloAutomation.MSR-2"
    version: "${version}"

  min_version: 2024.2.0


# Define Board
esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf


# Enable Home Assistant API
# Also Add Buzzer Service Connection
api:
  services:
    - service: play_buzzer
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'

    #Co2 Calibration Service
    - service: calibrate_co2_value
      variables:
        co2_ppm: float
      then:
        - scd4x.perform_forced_calibration:
            value: !lambda 'return co2_ppm;'
            id: scd40

    #Setting HLK Password
    - service: set_ld2410_bluetooth_password
      variables:
        password: string
      then:
        - bluetooth_password.set:
            id: ld2410_radar
            password: !lambda 'return password;'


# Set Up Key Ports For Communication
i2c:
  sda: GPIO1
  scl: GPIO0
  id: bus_a

uart:
  tx_pin: GPIO21
  rx_pin: GPIO20
  baud_rate: 256000
  parity: NONE
  stop_bits: 1


# Numbers For Configuration
number:
  - platform: ld2410
    timeout:
      name: Radar Timeout
    max_move_distance_gate:
      name: Radar Max Move Distance
    max_still_distance_gate:
      name: Radar Max Still Distance
    g0:
      move_threshold:
        name: g0 move threshold
      still_threshold:
        name: g0 still threshold
    g1:
      move_threshold:
        name: g1 move threshold
      still_threshold:
        name: g1 still threshold
    g2:
      move_threshold:
        name: g2 move threshold
      still_threshold:
        name: g2 still threshold
    g3:
      move_threshold:
        name: g3 move threshold
      still_threshold:
        name: g3 still threshold
    g4:
      move_threshold:
        name: g4 move threshold
      still_threshold:
        name: g4 still threshold
    g5:
      move_threshold:
        name: g5 move threshold
      still_threshold:
        name: g5 still threshold
    g6:
      move_threshold:
        name: g6 move threshold
      still_threshold:
        name: g6 still threshold
    g7:
      move_threshold:
        name: g7 move threshold
      still_threshold:
        name: g7 still threshold
    g8:
      move_threshold:
        name: g8 move threshold
      still_threshold:
        name: g8 still threshold

  - platform: template
    name: DPS Temperature Offset
    id: dps310_temperature_offset
    restore_value: true
    initial_value: 14.54
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "Â°C"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box
  # Setting start of zone 1 occupancy
  - platform: template
    name: "Radar Zone 1 Start"
    id: radar_z1_start
    device_class: distance
    min_value: 0
    max_value: 800
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    icon: "mdi:arrow-collapse-right"
    entity_category: CONFIG
    unit_of_measurement: "cm"
  # Setting ending of zone 1 occupancy
  - platform: template
    name: "Radar End Zone 1"
    id: radar_z1_end
    device_class: distance
    min_value: 0
    max_value: 800
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 50
    icon: "mdi:arrow-collapse-right"
    entity_category: CONFIG
    unit_of_measurement: "cm"
  # Setting ending of zone 2 occupancy
  - platform: template
    name: "Radar End Zone 2"
    id: radar_z2_end
    device_class: distance
    min_value: 0
    max_value: 800
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 150
    icon: "mdi:arrow-collapse-right"
    entity_category: CONFIG
    unit_of_measurement: "cm"
  # Setting ending of zone 3 occupancy
  - platform: template
    name: "Radar End Zone 3"
    id: radar_z3_end
    device_class: distance
    min_value: 0
    max_value: 800
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 250
    icon: "mdi:arrow-collapse-right"
    entity_category: CONFIG
    unit_of_measurement: "cm"


# Buzzer
output:
  - platform: ledc
    pin: GPIO10
    id: buzzer
rtttl:
 output: buzzer


binary_sensor:
  - platform: ld2410
    has_target:
      name: Radar Target
      id: radar_has_target
    has_moving_target:
      name: Radar Moving Target
      id: radar_has_moving_target
    has_still_target:
      name: Radar Still Target
      id: radar_has_still_target
  ## Set Up Radar Zones Based On Distance
  - platform: template
    name: "Radar Zone 1 Occupancy"
    id: radar_zone_1_occupancy
    device_class: occupancy
    icon: mdi:motion-sensor
    lambda: |-
      if ((id(radar_has_target).state) && ((id(radar_detection_distance).state < id(radar_z1_end).state) && (id(radar_detection_distance).state > id(radar_z1_start).state))){
        return true;
      } else {
        return false;
      }
  - platform: template
    name: "Radar Zone 2 Occupancy"
    id: radar_zone_2_occupancy
    device_class: occupancy
    icon: mdi:motion-sensor
    lambda: |-
      if ((id(radar_has_target).state) && ((id(radar_z1_end).state < id(radar_detection_distance).state) && (id(radar_detection_distance).state < id(radar_z2_end).state))) {
        return true;
      } else {
        return false;
      }
  - platform: template
    name: "Radar Zone 3 Occupancy"
    id: radar_zone_3_occupancy
    device_class: occupancy
    icon: mdi:motion-sensor
    lambda: |-
      if ((id(radar_has_target).state) && ((id(radar_z2_end).state < id(radar_detection_distance).state) && (id(radar_detection_distance).state < id(radar_z3_end).state))) {
        return true;
      } else {
        return false;
      }
  - platform: gpio
    pin: 
      number: GPIO9
      inverted: true
      mode:
        input: true
        pullup: true
    id: reset_button
    on_press:
      then:
        - lambda: |-
            id(button_press_timestamp) = millis();
            
    on_release:
      then:
        - lambda: |-
            if (millis() - id(button_press_timestamp) >= 1000) {
            id(testCycleCount) = 0;
            id(runTest) = true;
            id(testScript).execute();
            }
            else if (millis() - id(button_press_timestamp) >= 8000) {
            id(factory_reset_switch).turn_on();
            }


ld2410:
  id: ld2410_radar


light:
  - platform: esp32_rmt_led_strip
    id: rgb_light
    name: "RGB Light"
    pin: GPIO3
    rmt_channel: 0
    default_transition_length: 0s
    chipset: WS2812
    num_leds: 3
    rgb_order: grb
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 1000ms
          update_interval: 1000ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%


button:
  - platform: factory_reset
    disabled_by_default: True
    name: "Factory Reset ESP"
    id: factory_reset_all

  - platform: ld2410
    factory_reset:
      name: "Factory Reset Radar"
    restart:
      name: "Restart Radar"
    query_params:
      name: query params
  - platform: template
    name: "Calibrate SCD40 To 420ppm"
    id: set_SCD40_calibrate
    on_press:
      - scd4x.perform_forced_calibration:
          value: 420
          id: scd40


switch:
  - platform: ld2410
    bluetooth:
      name: "ld2410 Bluetooth"
      id: radar_bluetooth
    engineering_mode:
      name: "Radar Engineering Mode"
  - platform: template
    name: "Startup Light Blink"
    id: startup_light_blink
    icon: mdi:lightbulb
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
  - platform: factory_reset
    id: factory_reset_switch
    internal: true


text_sensor:
  - platform: ld2410
    version:
      name: "Radar Firmware Version"


select:
  - platform: ld2410
    distance_resolution:
      name: "ld2410 Gate Size"
      disabled_by_default: true


script:
  - id: testScript      
    then:
      if: 
        condition:
          - lambda: "return id(runTest) == true;"
        then:
          - lambda: "id(runTest) = false;"
          - lambda: "id(testCycleCount) = 0;"
          - while:
              condition:
                - lambda: "return id(testCycleCount) < 5;"
              then:
                - if:
                    condition:
                      - lambda: "return id(dps310Passed) == false;"
                    then:
                      - if:
                          condition:
                            - lambda: "return id(dps310pressure).state > 0;"
                          then:
                            - lambda: "id(dps310Passed) = true;"
                - if:
                    condition:
                      - lambda: "return id(ltr390lightPassed) == false;"
                    then:
                      - if:
                          condition:
                            - lambda: "return id(ltr390light).state > 10;"
                          then:
                            - lambda: "id(ltr390lightPassed) = true;"
                - if:
                    condition:
                      - lambda: "return id(ltr390uvindexPassed) == false;"
                    then:
                      - if:
                          condition:
                            - lambda: "return !isnan(id(ltr390uvindex).state);"
                          then:
                            - lambda: "id(ltr390uvindexPassed) = true;"
                - if:
                    condition:
                      - lambda: "return id(ld2410Passed) == false;"
                    then:
                      - if:
                          condition:
                            - lambda: "return (id(radar_has_target).state == true && id(radar_detection_distance).state > 10);"
                          then:
                            - lambda: "id(ld2410Passed) = true;"
                - if:
                    condition:
                      - lambda: "return id(dps310Passed) && id(ltr390lightPassed) && id(ltr390uvindexPassed) && id(ld2410Passed);"
                    then:
                      - lambda: "id(testCycleCount) = 10;"
                - lambda: "id(runTest) = false;"
                - delay: 1s
                - lambda: "id(testCycleCount) += 1;"
          
          #Check If Test Passed To Trigger Lights
          - if:
              condition:
                - lambda: "return id(dps310Passed) && id(ltr390lightPassed) && id(ltr390uvindexPassed) && id(ld2410Passed);"
              then:
                - lambda: "id(runTest) = false;"
                - light.turn_on:
                    id: rgb_light
                    red: 0%
                    green: 100%
                    blue: 0%
                - delay: 5s
                - light.turn_on:
                    id: rgb_light
                    red: 0%
                    green: 0%
                    blue: 0%
                - light.turn_off:
                    id: rgb_light
                
              else:
                - lambda: "id(runTest) = false;"
                - light.turn_on:
                    id: rgb_light
                    red: 100%
                    green: 0%
                    blue: 0%
                - delay: 5s
                - light.turn_on:
                    id: rgb_light
                    red: 0%
                    green: 0%
                    blue: 0%
                - light.turn_off:
                    id: rgb_light
  
  # script to publish MQTT messages
  - id: mqtt_publish_sensor_data
    then:
      - lambda: !lambda |-
          id(mqtt_sensor).publish_json("${device_manufacturer}_%{device_name}_${device_id}/data", [=](JsonObject root){

          // date and time
          root["timestamp"] = id(sntp_time).now().strftime("%Y-%m-%d %X");

          // sensor data
          root["co2"] = id(co2).state;
          root["pressure"]    = id(dps310pressure).state;
          root["temperature"] = id(dps310temperature).state;
          root["light"]    = id(ltr390light).state;
          root["uv_index"] = id(ltr390uvindex).state;
          root["detection_distance"] = id(radar_detection_distance).state * 2.54;
          root["moving_distance"]    = id(moving_distance).state * 2.54;
          root["still_distance"]     = id(still_distance).state * 2.54;
          root["zone_1_occupancy"] = id(radar_zone_1_occupancy).state;
          root["zone_2_occupancy"] = id(radar_zone_2_occupancy).state;
          root["zone_3_occupancy"] = id(radar_zone_3_occupancy).state;
          root["detection_target"] = id(radar_has_target).state;
          root["moving_target"]    = id(radar_has_moving_target).state;
          root["still_target"]     = id(radar_has_still_target).state;

          // rgb light data
          root["state"] = id(rgb_light_state);
          root["r"] = id(rgb_light_values)["r"];
          root["g"] = id(rgb_light_values)["g"];
          root["b"] = id(rgb_light_values)["b"];
          root["brightness"] = id(rgb_light_brightness);

          });


# publish sensor data every 10 seconds
time:
  - platform: sntp
    on_time: 
      seconds: /10
      then: 
        - script.execute: mqtt_publish_sensor_data
