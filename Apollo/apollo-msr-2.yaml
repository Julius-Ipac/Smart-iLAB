packages:
  msr-2:
    url: https://github.com/Cahlil-Togonon/Smart-iLAB
    ref: main
    file: Apollo/apollo-msr-2.yaml
    refresh: 5min


globals:
  - id: "rgb_light_state"
    restore_value: no
    type: std::string
  - id: "rgb_light_values"
    restore_value: no
    type: std::map<std::string, float>
  - id: "rgb_light_brightness"
    restore_value: no
    type: float


mqtt:
  id: mqtt_sensor
  broker: !secret broker_ip
  port: !secret broker_port
  username: !secret broker_username
  password: !secret broker_password
  
  topic_prefix: null  # removes /state and /command topics
  reboot_timeout: 1min
  
  on_json_message: 
    - topic: "apollo_msr_2_${device_id}/light"
      then: 
        - if:
            condition: 
              lambda: !lambda |-
                if(x.containsKey("state")){
                if(x["state"] == "On"){
                id(rgb_light_state) = "On";
                return true;
                }
                }
                id(rgb_light_state) = "Off";
                return false;
            then:
              - light.turn_on: 
                  id: rgb_light

                  red: !lambda |-
                    if(x.containsKey("color")){
                    if(x["color"].containsKey("r")){
                    id(rgb_light_values)["r"] = x["color"]["r"];
                    return x["color"]["r"];}}
                    return 0;
                  green: !lambda |-
                    if(x.containsKey("color")){
                    if(x["color"].containsKey("g")){
                    id(rgb_light_values)["g"] = x["color"]["g"];
                    return x["color"]["g"];}}
                    return 0;
                  blue: !lambda |-
                    if(x.containsKey("color")){
                    if(x["color"].containsKey("b")){
                    id(rgb_light_values)["b"] = x["color"]["b"];
                    return x["color"]["b"];}}
                    return 0;
                  brightness: !lambda |-
                    if(x.containsKey("brightness")){
                    id(rgb_light_brightness) = x["brightness"];
                    return x["brightness"];
                    }
                    return 0;
            else:
              - light.turn_off: rgb_light
    - topic: "apollo_msr_2_${device_id}/buzzer"
      then: 
        - rtttl.play: !lambda |-
            if(x.containsKey("mtttl_string"))
            return x["mtttl_string"];
            return "";


esphome:
  on_boot:
  - priority: -10
    then:
      - lambda: !lambda |-
          id(rgb_light_state) = "Off";
          id(rgb_light_values)["r"] = 0;
          id(rgb_light_values)["g"] = 0;
          id(rgb_light_values)["b"] = 0;
          id(rgb_light_brightness) = 0;
      - light.turn_off: rgb_light


script:
  - id: mqtt_publish_sensor_data
    then:
      - lambda: !lambda |-
          id(mqtt_sensor).publish_json("apollo_msr_2_${device_id}/data", [=](JsonObject root){

          // date and time
          root["timestamp"] = id(sntp_time).now().strftime("%Y-%m-%d %X");

          // sensor data
          root["co2"] = id(co2).state;
          root["pressure"]    = id(dps310pressure).state;
          root["temperature"] = id(dps310temperature).state;
          root["light"]    = id(ltr390light).state;
          root["uv_index"] = id(ltr390uvindex).state;
          root["detection_distance"] = id(radar_detection_distance).state * 2.54;
          root["moving_distance"]    = id(moving_distance).state * 2.54;
          root["still_distance"]     = id(still_distance).state * 2.54;
          root["zone_1_occupancy"] = id(radar_zone_1_occupancy).state;
          root["zone_2_occupancy"] = id(radar_zone_2_occupancy).state;
          root["zone_3_occupancy"] = id(radar_zone_3_occupancy).state;
          root["detection_target"] = id(radar_has_target).state;
          root["moving_target"]    = id(radar_has_moving_target).state;
          root["still_target"]     = id(radar_has_still_target).state;

          // rgb light data
          root["state"] = id(rgb_light_state);
          root["r"] = id(rgb_light_values)["r"];
          root["g"] = id(rgb_light_values)["g"];
          root["b"] = id(rgb_light_values)["b"];
          root["brightness"] = id(rgb_light_brightness);

          });


# publish sensor data every 10 seconds
time:
  - platform: sntp
    on_time: 
      seconds: /10
      then: 
        - script.execute: mqtt_publish_sensor_data
