packages:
  # device base packages
  device_base:
    url: https://github.com/Cahlil-Togonon/Smart-iLAB
    ref: main
    file: Apollo/apollo-air-1.yaml
    refresh: 5min


globals:
  - id: "rgb_light_state"
    restore_value: no
    type: std::string
  - id: "rgb_light_values"
    restore_value: no
    type: std::map<std::string, float>
  - id: "rgb_light_brightness"
    restore_value: no
    type: float


mqtt:
  id: mqtt_sensor
  broker: !secret broker_ip
  port: !secret broker_port
  username: !secret broker_username
  password: !secret broker_password
  
  topic_prefix: null  # removes /state and /command topics
  reboot_timeout: 1min
  
  on_json_message: 
    - topic: "apollo_air_1_${device_id}/light"
      then: 
        - if:
            condition: 
              lambda: !lambda |-
                if(x.containsKey("state")){
                if(x["state"] == "On"){
                id(rgb_light_state) = "On";
                return true;
                }
                }
                id(rgb_light_state) = "Off";
                return false;
            then:
              - light.turn_on: 
                  id: rgb_light

                  red: !lambda |-
                    if(x.containsKey("color")){
                    if(x["color"].containsKey("r")){
                    id(rgb_light_values)["r"] = x["color"]["r"];
                    return x["color"]["r"];}}
                    return 0;
                  green: !lambda |-
                    if(x.containsKey("color")){
                    if(x["color"].containsKey("g")){
                    id(rgb_light_values)["g"] = x["color"]["g"];
                    return x["color"]["g"];}}
                    return 0;
                  blue: !lambda |-
                    if(x.containsKey("color")){
                    if(x["color"].containsKey("b")){
                    id(rgb_light_values)["b"] = x["color"]["b"];
                    return x["color"]["b"];}}
                    return 0;
                  brightness: !lambda |-
                    if(x.containsKey("brightness")){
                    id(rgb_light_brightness) = x["brightness"];
                    return x["brightness"];
                    }
                    return 0;
            else:
              - light.turn_off: rgb_light


sensor:
  - platform: sen5x
    temperature:
      id: sen55_temperature
    humidity:
      id: sen55_humidity
    nox:
      id: sen55_nox


esphome:
  on_boot:
  - priority: -10
    then:
      - lambda: !lambda |-
          id(rgb_light_state) = "Off";
          id(rgb_light_values)["r"] = 0;
          id(rgb_light_values)["g"] = 0;
          id(rgb_light_values)["b"] = 0;
          id(rgb_light_brightness) = 0;


# Script to publish MQTT messages
script:
  - id: mqtt_publish_sensor_data
    then:
      - lambda: |-
          id(mqtt_sensor).publish_json("apollo_air_1_${device_id}/data", [=](JsonObject root){

          // date and time
          root["timestamp"] = id(sntp_time).now().strftime("%Y-%m-%d %X");

          // sensor data
          root["co2"]         = id("co2").state;
          root["pressure"]    = id(dps310pressure).state;
          root["temperature"] = id(dps310temperature).state;
          root["humidity"]    = id(sen55_humidity).state;
          root["nox"]         = id(sen55_nox).state;
          root["voc"]         = id(sen55_voc).state;
          root["voc_quality"] = id(voc_quality).state;
          root["pm_1_0"]      = id(pm_1_0).state;
          root["pm_2_5"]      = id(pm_2_5).state;
          root["pm_4_0"]      = id(pm_4_0).state;
          root["pm_10_0"]     = id(pm_10_0).state;

          // rgb light data
          root["state"] = id(rgb_light_state);
          root["r"] = id(rgb_light_values)["r"];
          root["g"] = id(rgb_light_values)["g"];
          root["b"] = id(rgb_light_values)["b"];
          root["brightness"] = id(rgb_light_brightness);

          });


time:
  - platform: sntp
    on_time: 
      seconds: /10
      then: 
        - script.execute: mqtt_publish_sensor_data
