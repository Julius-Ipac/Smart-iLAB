substitutions:
  name: apollo-air-1
  friendly_name: Apollo AIR-1
  version: "24.3.21.1"
  device_description: ${name} made by Apollo Automation - version ${version}.


packages:
  device_base:
    url: https://github.com/Cahlil-Togonon/Smart-iLAB
    ref: main
    file: packages/device_base.yaml
    refresh: 5min


globals:
  - id: cycleCounter
    type: int
    restore_value: no
    initial_value: '0'
  - id: button_press_timestamp
    restore_value: no
    type: uint32_t
    initial_value: '0'

  - id: "rgb_light_state"
    restore_value: no
    type: std::string
  - id: "rgb_light_values"
    restore_value: no
    type: std::map<std::string, float>
  - id: "rgb_light_brightness"
    restore_value: no
    type: float


mqtt:
  id: mqtt_sensor
  broker: !secret broker_ip
  port: !secret broker_port
  username: !secret broker_username
  password: !secret broker_password
  
  topic_prefix: null  # removes /state and /command topics
  reboot_timeout: 1min
  
  on_json_message: 
    - topic: "apollo_air_1_${device_id}/light"
      then: 
        - if:
            condition: 
              lambda: !lambda |-
                if(x.containsKey("state")){
                if(x["state"] == "On"){
                id(rgb_light_state) = "On";
                return true;
                }
                }
                id(rgb_light_state) = "Off";
                return false;
            then:
              - light.turn_on: 
                  id: rgb_light

                  red: !lambda |-
                    if(x.containsKey("color")){
                    if(x["color"].containsKey("r")){
                    id(rgb_light_values)["r"] = x["color"]["r"];
                    return x["color"]["r"];}}
                    return 0;
                  green: !lambda |-
                    if(x.containsKey("color")){
                    if(x["color"].containsKey("g")){
                    id(rgb_light_values)["g"] = x["color"]["g"];
                    return x["color"]["g"];}}
                    return 0;
                  blue: !lambda |-
                    if(x.containsKey("color")){
                    if(x["color"].containsKey("b")){
                    id(rgb_light_values)["b"] = x["color"]["b"];
                    return x["color"]["b"];}}
                    return 0;
                  brightness: !lambda |-
                    if(x.containsKey("brightness")){
                    id(rgb_light_brightness) = x["brightness"];
                    return x["brightness"];
                    }
                    return 0;
            else:
              - light.turn_off: rgb_light

  birth_message: 
    topic: "apollo_air_1_${device_id}/data"
    payload: |-
      root["timestamp"] = id(sntp_time).now().strftime("%Y-%m-%d %X");
      root["status"] = "Online";
  will_message: 
    topic: "apollo_air_1_${device_id}/data"
    payload: |-
      root["timestamp"] = id(sntp_time).now().strftime("%Y-%m-%d %X");
      root["status"] = "Offline";


sensor:
  - platform: scd4x
    id: scd40
    co2:
      name: "CO2"
      id: co2
    automatic_self_calibration: false
    update_interval: 60s
    measurement_mode: "periodic"
    i2c_id: bus_a
    ambient_pressure_compensation_source: dps310pressure

  - platform: dps310
    id: dps_310
    pressure:
      name: "DPS310 Pressure"
      id: dps310pressure
    temperature:
      id: dps310temperature
    update_interval: 30s
    i2c_id: bus_a

  - platform: sen5x
    id: sen55
    pm_1_0:
      name: "PM <1µm Weight concentration"
      id: pm_1_0
      accuracy_decimals: 2
    pm_2_5:
      name: "PM <2.5µm Weight concentration"
      id: pm_2_5
      accuracy_decimals: 2
    pm_4_0:
      name: "PM <4µm Weight concentration"
      id: pm_4_0
      accuracy_decimals: 2
    pm_10_0:
      name: "PM <10µm Weight concentration"
      id: pm_10_0
      accuracy_decimals: 2
    temperature:
      name: "SEN55 Temperature"
      id: sen55_temperature
      accuracy_decimals: 2
      filters:
        - lambda: return x - id(sen55_temperature_offset).state;
    humidity:
      name: "SEN55 Humidity"
      id: sen55_humidity
      filters:
        - lambda: return x - id(sen55_humidity_offset).state;
      accuracy_decimals: 2
    voc:
      name: "SEN55 VOC"
      id: sen55_voc
      algorithm_tuning:
        index_offset: 100
        learning_time_offset_hours: 12
        learning_time_gain_hours: 12
        gating_max_duration_minutes: 180
        std_initial: 50
        gain_factor: 230
    nox:
      name: "SEN55 NOX"
      id: sen55_nox
    acceleration_mode: low
    store_baseline: true
    address: 0x69
    update_interval: 10s

  - platform: template
    name: "PM 0.3 To 1 µm"
    id: pm0_3_to_1
    disabled_by_default: true
    lambda: return id(pm_1_0).state;
    unit_of_measurement: "µg/m³"
    state_class: measurement
    icon: mdi:air-filter
    update_interval: 10s
  
  - platform: template
    name: "PM 1 To 2.5 µm"
    id: pm1_to_2_5
    disabled_by_default: true
    lambda: return id(pm_2_5).state - id(pm_1_0).state;
    unit_of_measurement: "µg/m³"
    state_class: measurement
    icon: mdi:air-filter
    update_interval: 10s
  
  - platform: template
    name: "PM 2.5 To 4 µm"
    id: pm2_5_to_4
    disabled_by_default: true
    lambda: return id(pm_4_0).state - id(pm_2_5).state;
    unit_of_measurement: "µg/m³"
    state_class: measurement
    icon: mdi:air-filter
    update_interval: 10s

  - platform: template
    name: "PM 4 To 10 µm"
    id: pm4_to_10
    disabled_by_default: true
    lambda: return id(pm_10_0).state - id(pm_4_0).state;
    unit_of_measurement: "µg/m³"
    icon: mdi:air-filter
    update_interval: 10s

  - platform: mics_4514
    id: mics4514
    nitrogen_dioxide:
      name: Nitrogen Dioxide
    carbon_monoxide:
      name: Carbon Monoxide
    hydrogen:
      name: Hydrogen
    ethanol:
      name: Ethanol
    methane:
      name: Methane
    ammonia:
      name: Ammonia
    update_interval: 10s


binary_sensor:
  - platform: status
    name: Online
    id: ink_ha_connected
  - platform: gpio
    pin: 
      number: GPIO9
      inverted: true
      mode:
        input: true
        pullup: true
    id: reset_button
    on_press:
      then:
        - lambda: |-
            id(button_press_timestamp) = millis();    
    on_release:
      then:
        - lambda: |-
            if (millis() - id(button_press_timestamp) >= 5000) {
              // Remove Wifi
              id(factory_reset_switch).turn_on();
              
            }


text_sensor:
    # Convert VOC Index To Text: 
    # https://sensirion.com/media/documents/02232963/6294E043/Info_Note_VOC_Index.pdf
  - platform: template
    name: "VOC Quality"
    id: voc_quality
    icon: mdi:air-filter
    lambda: |-
      if (id(sen55_voc).state < 80) {
        return std::string("Improved");} 
      else if (id(sen55_voc).state < 120) {
        return std::string("Normal");} 
      else if (id(sen55_voc).state < 200) {
        return std::string("Abnormal");} 
      else if (id(sen55_voc).state < 300) {
        return std::string("Very abnormal");} 
      else {
        return std::string("Extremely abnormal");}


light:
  - platform: esp32_rmt_led_strip
    id: rgb_light
    name: "RGB Light"
    pin: GPIO3
    rmt_channel: 0
    default_transition_length: 0s
    chipset: WS2812
    num_leds: 3
    rgb_order: grb
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%


button:
  - platform: factory_reset
    disabled_by_default: True
    name: "Factory Reset ESP"
    id: factory_reset_all

  - platform: template
    name: "Calibrate SCD40 To 420ppm"
    id: set_SCD40_calibrate
    on_press:
      - scd4x.perform_forced_calibration:
          value: 420
          id: scd40

  - platform: template
    name: "Clean SEN55"
    id: clean_sen55
    on_press:
      - sen5x.start_fan_autoclean: sen55


switch:
  - platform: template
    name: "Startup Light Blink"
    id: startup_light_blink
    icon: mdi:lightbulb
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
  - platform: factory_reset
    id: factory_reset_switch
    internal: true


#Used To Control RGB Light On Startup. Tells User Status Of Device
interval:
  - interval: 1s
    then:
      - if:
          condition:
            - binary_sensor.is_off: ink_ha_connected
            - lambda: 'return id(cycleCounter) < 30;'
            - switch.is_on: startup_light_blink

          then:
            - light.toggle:
                id: rgb_light
            - lambda: 'id(cycleCounter) += 1;'

  - interval: 1s
    then:
      - if:
          condition:
            - binary_sensor.is_off: ink_ha_connected
            - lambda: 'return id(cycleCounter) > 30;'
            - lambda: 'return id(cycleCounter) < 31;'
            - switch.is_on: startup_light_blink

          then:
            - light.turn_off:
                id: rgb_light
            - lambda: 'id(cycleCounter) += 1;'


esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  comment: "${friendly_name}"
  name_add_mac_suffix: true
  platformio_options:
    board_build.flash_mode: dio

  project:
    name: "ApolloAutomation.AIR-1"
    version: "${version}"

  min_version: 2023.11.1

  on_boot:
  - priority: -10
    then:
      - lambda: !lambda |-
          id(rgb_light_state) = "Off";
          id(rgb_light_values)["r"] = 0;
          id(rgb_light_values)["g"] = 0;
          id(rgb_light_values)["b"] = 0;
          id(rgb_light_brightness) = 0;
      - light.turn_off: rgb_light


esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino


api:
  # Enable Home Assistant API
  # Also Add Buzzer Service Connection
  on_client_connected:
    - delay: 1s
    - light.turn_off: rgb_light
    - lambda: 'id(cycleCounter) = 30;'
  services:
    #Co2 Calibration Service
    - service: calibrate_co2_value
      variables:
        co2_ppm: float
      then:
        - scd4x.perform_forced_calibration:
            value: !lambda "return co2_ppm;"
            id: scd40
    - service: sen55_clean
      then:
        - sen5x.start_fan_autoclean: sen55


i2c:
  sda: GPIO1
  scl: GPIO0
  id: bus_a


number:
  - platform: template
    name: SEN55 Temperature Offset
    id: sen55_temperature_offset
    restore_value: true
    initial_value: 6.0
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "°C"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box
  - platform: template
    name: SEN55 Humidity Offset
    id: sen55_humidity_offset
    restore_value: true
    initial_value: 0
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "°C"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box


script:
  - id: mqtt_publish_sensor_data
    then:
      - lambda: |-
          id(mqtt_sensor).publish_json("apollo_air_1_${device_id}/data", [=](JsonObject root){

          // date and time
          root["timestamp"] = id(sntp_time).now().strftime("%Y-%m-%d %X");

          // sensor data
          root["co2"]         = id(co2).state;
          root["pressure"]    = id(dps310pressure).state;
          root["temperature"] = id(dps310temperature).state;
          root["humidity"]    = id(sen55_humidity).state;
          root["nox"]         = id(sen55_nox).state;
          root["voc"]         = id(sen55_voc).state;
          root["voc_quality"] = id(voc_quality).state;
          root["pm_1_0"]      = id(pm_1_0).state;
          root["pm_2_5"]      = id(pm_2_5).state;
          root["pm_4_0"]      = id(pm_4_0).state;
          root["pm_10_0"]     = id(pm_10_0).state;

          // rgb light data
          root["state"] = id(rgb_light_state);
          root["r"] = id(rgb_light_values)["r"];
          root["g"] = id(rgb_light_values)["g"];
          root["b"] = id(rgb_light_values)["b"];
          root["brightness"] = id(rgb_light_brightness);

          });


time:
  - platform: sntp
    on_time: 
      seconds: /10
      then: 
        - script.execute: mqtt_publish_sensor_data
