substitutions:
  name: "smart-plug-v2"
  friendly_name: "Smart Plug V2"
  # Allows ESP device to be automatically lined to an 'Area' in Home Assistant. Typically used for areas such as 'Lounge Room', 'Kitchen' etc
  room: ""
  device_description: "athom smart plug v2"
  project_name: "Athom Technology.Smart Plug V2"
  project_version: "2.0.1"
  relay_restore_mode: RESTORE_DEFAULT_OFF
  sensor_update_interval: 5s
  sensor_accuracy_decimals: "3"
  # Current Limit in Amps. AU Plug = 10. IL, BR, EU, UK, US Plug = 16.
  current_limit : "16"

  
packages:
  device_base:
    url: https://github.com/Cahlil-Togonon/Smart-iLAB
    ref: main
    file: packages/device_base.yaml
    refresh: 5min


globals:
  - id: total_energy
    type: float
    restore_value: yes
    initial_value: '0.0'

  - id: actuator_state_changed
    restore_value: no
    type: 'bool'
    initial_value: 'false'
  - id: previous_relay_state
    restore_value: no
    type: 'bool'
    initial_value: 'true'


mqtt: 
  id: mqtt_sensor
  broker: !secret broker_ip
  port: !secret broker_port
  username: !secret broker_username
  password: !secret broker_password
  
  topic_prefix: null  # removes /state and /command topics
  reboot_timeout: 1min
  
  on_json_message: 
    topic: "athom_smart_plug_v2_${device_id}/relay"
    then: 
       - lambda: !lambda |-
           if(x["state"] == "On"){
             id(relay).turn_on();
           } else {
             id(relay).turn_off();
           }
  
  birth_message: 
    topic: "athom_smart_plug_v2_${device_id}/data"
    payload: "athom_smart_plug_v2_${device_id} online"
  
  will_message: 
    topic: "athom_smart_plug_v2_${device_id}/data"
    payload: "athom_smart_plug_v2_${device_id} offline"


sensor:
  - platform: cse7766
    current:
      name: "Current"
      id: current
      accuracy_decimals: ${sensor_accuracy_decimals}
      filters:
        - throttle_average: ${sensor_update_interval}
        # - lambda: if (x < 0.060) return 0.0; else return x;   #For the chip will report less than 3w power when no load is connected
      on_value_range:
        - above: ${current_limit}
          then:
            - switch.turn_off: relay

    voltage:
      name: "Voltage"
      id: voltage
      accuracy_decimals: ${sensor_accuracy_decimals}
      filters:
        - throttle_average: ${sensor_update_interval}

    power:
      name: "Power"
      id: power_sensor
      accuracy_decimals: ${sensor_accuracy_decimals}
      filters:
        - throttle_average: ${sensor_update_interval}
        # - lambda: if (x < 3.0) return 0.0; else return x;    #For the chip will report less than 3w power when no load is connected

    energy:
      name: "Energy"
      id: energy
      accuracy_decimals: ${sensor_accuracy_decimals}
      unit_of_measurement: kWh
      filters:
        - throttle: ${sensor_update_interval}
        # Multiplication factor from W to kW is 0.001
        - multiply: 0.001
      on_value:
        then:
          - lambda: |-
              static float previous_energy_value = 0.0;
              float current_energy_value = id(energy).state;
              id(total_energy) += current_energy_value - previous_energy_value;
              previous_energy_value = current_energy_value;
              id(total_energy_sensor).update();

  - platform: template
    name: "Total Energy"
    id: total_energy_sensor
    unit_of_measurement: kWh
    device_class: "energy"
    state_class: "total_increasing"
    icon: "mdi:lightning-bolt"
    accuracy_decimals: ${sensor_accuracy_decimals}
    lambda: |-
      return id(total_energy);
    update_interval: never

  - platform: total_daily_energy
    name: "Total Daily Energy"
    id: total_daily_energy_sensor
    restore: true
    power_id: power_sensor
    unit_of_measurement: kWh
    accuracy_decimals: ${sensor_accuracy_decimals}
    filters:
      - multiply: 0.001


binary_sensor:
  - platform: gpio
    pin:
      number: 5
      mode: INPUT_PULLUP
      inverted: true
    name: "Power Button"
    disabled_by_default: true
    on_multi_click:
      - timing:
        - ON for at most 1s
        - OFF for at least 0.2s
        then:
          - switch.toggle: relay
      - timing:
        - ON for at least 4s
        then:
          - button.press: Reset


light:
  - platform: status_led
    name: "Status LED"
    id: blue_led
    disabled_by_default: true
    pin:
      inverted: true
      number: GPIO13


button:
  - platform: factory_reset
    name: "Factory Reset"
    id: Reset
    entity_category: config

  - platform: safe_mode
    name: "Safe Mode"
    internal: false
    entity_category: config


switch:
  - platform: gpio
    name: "Switch"
    pin: GPIO12
    id: relay
    restore_mode: ${relay_restore_mode}


esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  area: "${room}"
  name_add_mac_suffix: true
  
  project:
    name: "${project_name}"
    version: "${project_version}"
    
  min_version: 2024.2.1
  
  on_boot:
  - priority: -10
    then:
      - switch.turn_on: relay


esp8266:
  board: esp8285
  restore_from_flash: true


preferences:
  flash_write_interval: 5min


logger:
  baud_rate: 0


uart:
  rx_pin: RX
  baud_rate: 4800


script:
  # publish sensor and actuator data
  - id: mqtt_publish_data
    then:
      - lambda: !lambda |-
          id(mqtt_sensor).publish_json("athom_smart_plug_v2_${device_id}/data", [=](JsonObject root){
          
          // timestamp
          root["timestamp"] = id(sntp_time).now().strftime("%Y-%m-%d %X%z");
  
          // sensor data
          root["current"] = id(current).state;
          root["energy"] = id(energy).state;
          root["power"] = id(power_sensor).state;
          root["total_daily_energy"] = id(total_daily_energy_sensor).state;
          root["total_energy"] = id(total_energy_sensor).state;
          root["voltage"] = id(voltage).state;
  
          // relay data
          root["state"] = id(relay).state;
          
          });
            
  # publish sensor and actuator data if an actuator's state changed
  - id: mqtt_publish_data_on_actuator_state_change
    then:
      - lambda: !lambda |-
          if(id(previous_relay_state) != id(relay).state){
            id(previous_state) = id(relay).state;
            id(actuator_state_changed) = true;
          }
    
          if(id(actuator_state_changed) == true){
            id(mqtt_publish_data).execute();
          }
          
          id(actuator_state_changed) = false;

time:
  # every 10 seconds, publish sensor and actuator data
  - platform: sntp
    on_time: 
      seconds: /10
      then: 
        - script.execute: mqtt_publish_data
  # every second, check if an actuator's state changed
  - platform: sntp
    on_time: 
      seconds: /1,/2,/3,/4,/5,/6,/7,/8,/9,/10
      then: 
        - script.execute: mqtt_publish_data_on_actuator_state_change
